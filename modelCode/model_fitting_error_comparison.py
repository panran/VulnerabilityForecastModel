#!/usr/bin/env python
# -*- coding:utf8 -*-
import matplotlib.pylab as plt
import xlrd
import math
from scipy import interpolate
import numpy as np

def readData(file , index=0):
    workbook=xlrd.open_workbook(file)
    sheet=workbook.sheet_by_index(0)
    data=sheet.row_values(index)
    #读取数据
    return data

def Data_Model_1(data, name, color):
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
    x=[]

    for i in range(data.__len__()):
        x.append(i)
    print(x)
    y=data
    xnew = np.arange(0, x[x.__len__()-1], 0.1)
    func = interpolate.interp1d(x, y, kind='cubic')
    ynew = func(xnew)

    #plt.plot(y, color=color,linewidth=1.0)

    #plt.xlim(0, 20, 2)
    plt.ylim(0, 80)
    plt.plot(xnew, ynew,color=color,linewidth=1.0)
    plt.legend()
    plt.title(name )
    plt.xlabel('Time(month)')
    plt.ylabel('Speed')


def Data_Model(data,name,color):
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签

    plt.plot(data,'.',color=color, label=name)
    plt.legend()
    plt.title(name )
    #plt.xlim(0, 80)
    plt.xlabel('Time(month)')
    plt.ylabel('Nmuber(one)')

def Data_Model_line(data,line_type,name,color,width):
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签

    plt.plot(data,line_type,color=color, label=name,linewidth=width)
   # plt.plot(data, '',color=color)
    font1 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 15,
             }

    plt.legend(prop=font1)
    plt.title('')
    #plt.xlim(0, 80)
    #plt.ylim(0,1.0)

def Data_line(data,line_type,name,color):
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签

    plt.plot(data,'.',color=color, label=name,linewidth=0.3)
    plt.plot(data, '.',color=color)

    plt.title('')
    #plt.xlim(0, 80)


if __name__ == "__main__":
    data = []



    figsize = 10, 15

    figure, ax = plt.subplots(figsize=figsize)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False


    mac_os_server = readData('../dataSet/' + 'mac_os_server' + '.xlsx')
    win_xp = readData('../dataSet/' + 'win_xp' + '.xlsx')
    win_7 = readData('../dataSet/' + 'win_7' + '.xlsx')
    win_server_2003 = readData('../dataSet/' + 'win_server_2003' + '.xlsx')
    Linux_kernelData = readData('../dataSet/' + 'Linux_kernelData' + '.xlsx')

    RE = readData('../dataSet/' + 'mac_os_server_RE' + '.xlsx')
    AT = readData('../dataSet/' + 'mac_os_server_AT' + '.xlsx')
    LP = readData('../dataSet/' + 'mac_os_server_LP' + '.xlsx')
    AML = readData('../dataSet/' + 'mac_os_server_AML' + '.xlsx')
    PMGTV = readData('../dataSet/' + 'mac_os_server_PMGTV' + '.xlsx')

    RE_error = []
    AT_error = []
    LP_error = []
    AML_error = []
    PMGTV_error = []
    line_0=[]
    print(AT[10])

    for i in range(len(mac_os_server)):
        RE_error.append(RE[i] - mac_os_server[i])
        AT_error.append(AT[i] - mac_os_server[i])
        LP_error.append(LP[i] - mac_os_server[i])
        AML_error.append(AML[i] - mac_os_server[i])
        PMGTV_error.append(PMGTV[i] - mac_os_server[i])
        line_0.append(0)


    Data_Model(mac_os_server, 'mac_os_server', 'r')
    Data_Model(RE, 'RE', 'blue')
    Data_Model_line(RE,"-.", 'RE', 'blue',0.5)
    Data_Model_line(AT,":", 'AT', 'black',0.5)
    Data_Model_line(LP, "_",'LP', 'c',0.5)
    Data_Model_line(AML, "+",'AML', 'purple',0.5)
    Data_Model_line(PMGTV,"-",'PMGTV', 'green',0.5)





    plt.subplot(3, 2, 1)
    plt.ylim(-200, 200)
    plt.xlim(0, 60)
    Data_Model_line(RE_error, "-", 'RE_Fitting_error_value', 'blue',1.5)
    Data_Model_line(line_0, "-", '', 'black',0.5)
    plt.grid()  # 生成网格
    font2 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 20,
             }
    plt.xlabel('Time(month)', font2)
    plt.ylabel('tolerance scope', font2)
    plt.title('RE',font2)


    plt.subplot(3, 2, 2)
    plt.ylim(-200, 200)
    plt.xlim(0, 60)
    Data_Model_line(LP_error, "-", 'LP_Fitting_error_value', 'blue',1.5)
    Data_Model_line(line_0, "-", '', 'black',0.5)
    plt.grid()  # 生成网格
    font2 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 20,
             }
    plt.xlabel('Time(month)', font2)
    plt.ylabel('tolerance scope', font2)
    plt.title('LP',font2)
    #
    plt.subplot(3, 2, 3)
    plt.ylim(-200, 200)
    plt.xlim(0, 60)
    Data_Model_line(AML_error, "-", 'AML_Fitting_error_value', 'blue',1.5)
    Data_Model_line(line_0, "-", '', 'black',0.5)
    plt.grid()  # 生成网格
    font2 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 20,
             }
    plt.xlabel('Time(month)', font2)
    plt.ylabel('tolerance scope', font2)
    plt.title('AML',font2)
    #
    plt.subplot(3, 2, 4)

    plt.ylim(-200, 200)
    plt.xlim(0, 60)
    Data_Model_line(AT_error, "-", 'AT_Fitting_error_value', 'blue', 1.5)
    Data_Model_line(line_0, "-", '', 'black', 0.5)
    plt.grid()  # 生成网格
    font2 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 20,
             }
    plt.xlabel('Time(month)', font2)
    plt.ylabel('tolerance scope', font2)
    plt.title('AT',font2)

    plt.subplot(3, 2, 5)
    plt.ylim(-200, 200)
    plt.xlim(0, 60)
    Data_Model_line(PMGTV_error, "-", 'PMGTV_Fitting_error_value', 'blue', 1.5)
    Data_Model_line(line_0, "-", '', 'black', 0.5)
    plt.grid()  # 生成网格

    font2 = {'family': 'Times New Roman',
             'weight': 'normal',
             'size': 20,
             }
    plt.xlabel('Time(month)', font2)
    plt.ylabel('tolerance scope', font2)

    plt.title('PMGTV',font2)

    plt.xlabel('Time(month)')
    plt.ylabel('Nmuber(one)')



    plt.show()
    print(PMGTV_error)
    exit()